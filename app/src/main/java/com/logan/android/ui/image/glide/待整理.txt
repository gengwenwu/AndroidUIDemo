1，Glide重要用法：
    Glide.with(context).load(url).into(imageView)

    with()
        方法的参数可以是Activity、Fragment等。将用于图片加载的生命周期，比如传入的是activity，那么在activity销毁时将对相关图片资源进行回收。
        with参数优先级：Fragment > Activity > Context

    load()
        方法的参数可以为String、Uri、File、资源ID等。

    into()
        方法的参数可以是ImageView，Target、图片的宽高。

2，缓存策略
    requestOptions.skipMemoryCache(true) //不加入内存缓存，默认会加入
                  .diskCacheStrategy(DiskCacheStrategy.NONE); //不加入磁盘缓存

    磁盘缓存策略有以下几种：
        DiskCacheStrategy.NONE： 表示不缓存任何内容。
        DiskCacheStrategy.DATA： 表示只缓存原始图片(对应Glide 3中的 DiskCacheStrategy.SOURCE)。
        DiskCacheStrategy.RESOURCE： 表示只缓存转换过后的图片(对应Glide 3中的 DiskCacheStrategy.RESULT)。
        DiskCacheStrategy.ALL ： 表示既缓存原始图片，也缓存转换过后的图片。
        DiskCacheStrategy.AUTOMATIC： 表示让Glide根据图片资源智能地选择使用哪一种缓存策略（默认选项）。

    另外再补充一点：
        (1)，网络图片缓存是根据url地址进行存储的，对于同一张图片但其url地址不同(可变动)的情况，则无法起到缓存作用。
          这个时候可以通过自定义Url来应对这种情况，具体方案请参考这里的“高级技巧”小节。


======== 文章思路整理整理
可以参考郭霖glide系列，他那个是3.x，从4.x版本写起

一，基础篇(入门用法)
    1，常用用法
    2，Target
    3，Transform
    4，特例、解决方案

二，进阶偏
    1，Glide执行流程
    2，Glide到缓存机制
    3，Glide的回调与监听 [submit()，preload(), submit()，downloadOnly()]
    4，Glide的Transform
    5，Glide 自定义模块
    6，实现带进度的Glide图片加载功能

    7，Glide节省内存用法？
    8，封装？


============== 阅读源码笔记，4.x版本
1, Glide.with(context) 返回 RequestManager
	context 是 Application
	context 是 Activity、FragmentActivity、Context，则会添加隐藏的Fragment，监听生命周期

2, load() 返回 RequestBuilder

3, into() 返回 ViewTarget<T> // T 可以是 Bitmap、Drawable
	(1), ViewTarget
	(2), 创建Request
	(3)，将 Request 设置到 ViewTarget
	(4), requestManager.track(target, request)
			requestTracker.runRequest(request)
				request.begin() //以SingleRequest为例
					onSizeReady()
						DecodeJob.run()
							runWrapped()
								runGenerators()
									currentGenerator.startNext()
										 startNextLoad() -> loadData.fetcher.loadData()

======
EngineKey是Glide中的缓存Key
	// EngineKey重写了equals()、hashCode() 确保对象统一

默认情况下，Glide自动就是开启内存缓存。
Glide内存缓存也使用的LruCache算法。除了LruCache算法之外，它还结合了一种弱引用的机制，共同完成了内存缓存功能。


// 初始化各种缓存策略
Glide.with(context)
	getRetriever() -> Glide.get(context)
		checkAndInitializeGlide() -> initializeGlide()
			initializeGlide() -> initializeGlide()
				builder.build(applicationContext)

// 从内存中读取
into()
	requestManager.track(target, request)
			requestTracker.runRequest(request)
				request.begin() //以SingleRequest为例
					onSizeReady() -> engine.load()
						loadFromMemory()
							loadFromActiveResources() // activeResources(ActiveResources)，弱引用
							loadFromCache() // LruResourceCache，LruCache算法


// 存放图片到内存
	requestManager.track(target, request)
			requestTracker.runRequest(request)
				request.begin() //以SingleRequest为例
					onSizeReady()
						DecodeJob -> run()
							runWrapped()
								decodeFromRetrievedData()
									notifyEncodeAndRelease()
										notifyComplete()
											onResourceReady()
												notifyCallbacksOfResult()
													onEngineJobComplete() ->  activeResources.activate(key, resource);

    EngineResource
        acquire()
        release() // put 到 LruResourceCache中

硬盘缓存
	Glide默认硬盘缓存是DiskCacheStrategy.AUTOMATIC。
	硬盘缓存的实现也是使用的LruCache算法，Glide使用的自己编写的DiskLruCache工具类

	关键代码：DecodeJob.runWrapped()
		首先，从ResourceCacheGenerator取图片(根据ResourceCacheKey)；
		如果没有，然后，从DataCacheGenerator取图片(根据originalKey)；
		如果没有，最后，在SourceGenerator处理。请求网络、保存图片等都在这里。


		原始图片的缓存Key用的是originalKey

	// 三者的区别？
		// 转换过的图片
		ResourceCacheGenerator
		// 原始的图片
		DataCacheGenerator
		// 写入磁盘
		SourceGenerator


======
into()设置图片
	into() -> requestManager.track(target, request);
		requestTracker.runRequest(request);
	 		request.begin();
	 			onResourceReady(resource, DataSource.MEMORY_CACHE);
	 				onResourceReady((Resource<R>) resource, (R) received, dataSource);
	 					target.onResourceReady(result, animation);

