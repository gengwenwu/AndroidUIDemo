1，最简单用法：
    Glide.with(context).load(url).into(imageView)

    with()
    方法的参数可以是Activity、Fragment等。将用于图片加载的生命周期，比如传入的是activity，那么在activity销毁时将对相关图片资源进行回收。

    load()
    方法的参数可以为String、Uri、File、资源ID等。

    into()
    方法的参数可以是ImageView，Target、图片的宽高。


2，缓存策略
    requestOptions.skipMemoryCache(true) //不加入内存缓存，默认会加入
                  .diskCacheStrategy(DiskCacheStrategy.NONE); //不加入磁盘缓存

    磁盘缓存策略有以下几种：
        DiskCacheStrategy.NONE： 表示不缓存任何内容。
        DiskCacheStrategy.DATA： 表示只缓存原始图片。
        DiskCacheStrategy.RESOURCE： 表示只缓存转换过后的图片。
        DiskCacheStrategy.ALL ： 表示既缓存原始图片，也缓存转换过后的图片。
        DiskCacheStrategy.AUTOMATIC： 表示让Glide根据图片资源智能地选择使用哪一种缓存策略（默认选项）。

    另外再补充一点：
        (1)，网络图片缓存是根据url地址进行存储的，对于同一张图片但其url地址不同(可变动)的情况，则无法起到缓存作用。
          这个时候可以通过自定义Url来应对这种情况，具体方案请参考这里的“高级技巧”小节。


3，封装库多变换
        同时应用多个变换
        List<Transformation> list = new ArrayList<>();
        list.add(new RoundedCornersTransformation(radius, margin));
        list.add(new BlurTransformation(blurRadius));
        list.add(new GrayscaleTransformation());
        MultiTransformation multiTransformation = new MultiTransformation(list);
        RequestOptions requestOptions = new RequestOptions();
        //同时应用圆角、模糊、灰白的变换效果
        requestOptions.transform(multiTransformation);
        Glide.with(context)
             .load(url)
             .apply(requestOptions)
             .into(imageView);

